document.addEventListener('DOMContentLoaded', () => {
  const API_KEY = '03e66e3a69ab27b33648570df1c843df';
  const API_URL = 'https://api.themoviedb.org/3/search/movie';
  const IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500';
  const SUGGESTION_DELAY = 300;

  const searchInput = document.getElementById('search-input');
  const searchButton = document.getElementById('search-button');
  const moviesContainer = document.getElementById('movies-container');
  const suggestionsContainer = document.getElementById('suggestions-container');
  const closeResultsButton = document.getElementById('close-results');
  closeResultsButton.addEventListener('click', closeResults);

  function fillYearOptions() {
    const yearSelect = document.getElementById('year');
    const currentYear = new Date().getFullYear();

    for (let year = currentYear; year >= 1900; year--) {
      const option = document.createElement('option');
      option.value = year;
      option.textContent = year;
      yearSelect.appendChild(option);
    }
  }

  function updateRatingDisplay() {
    const rating = document.getElementById('rating').value;
    document.getElementById('rating-display').textContent = rating;
  }

  async function fetchGenres() {
    const url = `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=es-ES`;

    try {
      const response = await fetch(url);
      const data = await response.json();
      displayGenres(data.genres);
    } catch (error) {
      console.error('Error fetching genres:', error);
    }
  }

  function displayGenres(genres) {
    const genreSelect = document.getElementById('genre');
    genres.forEach(genre => {
      const option = document.createElement('option');
      option.value = genre.id;
      option.textContent = genre.name;
      genreSelect.appendChild(option);
    });
  }

  async function searchWithFilters(year, genre, rating, totalPages = 3) {
    const loadingMessage = document.getElementById('loading-message');

    const fetchMovies = (page) => {
      let url = `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&language=es-ES&page=${page}&include_adult=false`;

      if (year) {
        url += `&primary_release_year=${year}`;
      }

      if (genre) {
        url += `&with_genres=${genre}`;
      }

      if (rating) {
        url += `&vote_average.gte=${rating}`;
      }

      return fetch(url).then(response => response.json());
    };

    const allPages = Array.from({ length: totalPages }, (_, index) => index + 1);
    const allRequests = allPages.map(page => fetchMovies(page));

    loadingMessage.style.display = 'block';

    try {
      const pagesData = await Promise.all(allRequests);
      const allResults = pagesData.flatMap(pageData => pageData.results);
      if (allResults.length > 0) {
        await displayMovies(allResults);
      } else {
        alert('No se encontraron películas con los filtros seleccionados.');
      }
    } catch (error) {
      console.error('Error al buscar películas con filtros:', error);
    } finally {
      loadingMessage.style.display = 'none';
    }
  }

  fillYearOptions();
  document.getElementById('rating').addEventListener('input', updateRatingDisplay);

  document.getElementById('search-filters-button').addEventListener('click', () => {
    const year = document.getElementById('year').value;
    const genre = document.getElementById('genre').value;
    const rating = document.getElementById('rating').value;

    searchWithFilters(year, genre, rating);
  });

  async function fetchUpcomingMovies() {
    const url = `https://api.themoviedb.org/3/movie/upcoming?api_key=${API_KEY}&page=1`;

    try {
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      const data = await response.json();
      displayUpcomingMovies(data.results);
    } catch (error) {
      console.error('Error fetching upcoming movies:', error);
    }
  }

  function displayUpcomingMovies(movies) {
    movies.forEach(movie => {
      console.log(movie.title, movie.release_date);
    });
  }

  fetchUpcomingMovies();

  searchButton.addEventListener('click', searchMovies);

  searchInput.addEventListener('keyup', event => {
    if (event.key === 'Enter') {
      searchMovies();
    }
    getSuggestions(searchInput.value);
  });

  async function fetchMovieDetails(movieId) {
    const url = `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=es-ES&append_to_response=keywords`;
    try {
      const response = await fetch(url);
      const data = await response.json();

      const detailsContainer = document.createElement('div');
      detailsContainer.className = 'mb-4';

      const movieDetails = [
        { label: 'Sinopsis: ', value: data.overview },

        { label: 'Palabras clave: ', value: data.keywords.keywords.map(keyword => keyword.name).join(', ') },

        { label: 'Duración:', value: `${data.runtime} min` },
        { label: 'Presupuesto: ', value: `$${data.budget.toLocaleString()}` },
        { label: 'Recaudación: ', value: `$${data.revenue.toLocaleString()}` },
        { label: 'Fecha de lanzamiento: ', value: data.release_date },
        { label: 'Género: ', value: data.genres.map(genre => genre.name).join(', ') },
        { label: 'Calificación en TMDb: ', value: `${data.vote_average} (${data.vote_count} votos)` },
        { label: 'URL de la película en TMDb: ', value: `https://www.themoviedb.org/movie/${movieId}`, link: true },
        { label: 'Página oficial: ', value: data.homepage || 'No disponible', link: !!data.homepage },
        { label: 'Compañías productoras: ', value: data.production_companies.map(company => company.name).join(', ') },
        { label: 'Estado: ', value: data.status },
        { label: 'Idioma original: ', value: data.original_language },
        { label: 'Países de producción: ', value: data.production_countries.map(country => country.name).join(', ') },
      ];

      movieDetails.forEach(detail => {
        const detailRow = document.createElement('div');
        detailRow.className = 'mb-2';

        const detailLabel = document.createElement('strong');
        detailLabel.textContent = detail.label;
        detailRow.appendChild(detailLabel);

        if (detail.link) {
          const detailValue = document.createElement('a');
          detailValue.href = detail.value;
          detailValue.textContent = detail.value;
          detailValue.target = '_blank';
          detailValue.rel = 'noopener noreferrer';
          detailRow.appendChild(detailValue);
        } else {
          const detailValue = document.createElement('span');
          detailValue.textContent = detail.value;
          detailRow.appendChild(detailValue);
        }

        detailsContainer.appendChild(detailRow);
      });

      return detailsContainer;
    } catch (error) {
      console.error('Error fetching movie details:', error);
    }
  }

  async function fetchMovieCastAndCrew(movieId) {
    const url = `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=es-ES`;
    const imageUrl = 'https://image.tmdb.org/t/p/w200';

    try {
      const response = await fetch(url);
      const data = await response.json();

      const castAndCrewContainer = document.createElement('div');
      castAndCrewContainer.className = 'row';

      const movieDetails = await fetchMovieDetails(movieId);
      if (movieDetails) {
        castAndCrewContainer.appendChild(movieDetails);
      }

      const castColumn = document.createElement('div');
      castColumn.className = 'col-md-6';
      const castTitle = document.createElement('h3');
      castTitle.textContent = 'Reparto:';
      castColumn.appendChild(castTitle);

      const castList = document.createElement('div');
      castList.className = 'row';
      const castPromises = data.cast.slice(0, 5).map(async (actor) => {
        const wikipediaUrl = await fetchWikipediaInfo(actor.name);
        const actorInfo = createPersonCard(actor, imageUrl, wikipediaUrl);
        castList.appendChild(actorInfo);
      });

      await Promise.allSettled(castPromises);
      castColumn.appendChild(castList);
      castAndCrewContainer.appendChild(castColumn);

      const crewColumn = document.createElement('div');
      crewColumn.className = 'col-md-6';
      const crewTitle = document.createElement('h3');
      crewTitle.textContent = 'Equipo:';
      crewColumn.appendChild(crewTitle);

      const crewRoles = [
        { job: 'Director', label: 'Director(es):' },
        { job: 'Screenplay', label: 'Guionista(s):' },
        { job: 'Producer', label: 'Productor(es):' },
        { job: 'Director of Photography', label: 'Director(es) de fotografía:' },
      ];

      for (const crewRole of crewRoles) {
        const crewList = data.crew.filter(crewMember => crewMember.job === crewRole.job);

        if (crewList.length > 0) {
          const roleTitle = document.createElement('h4');
          roleTitle.textContent = crewRole.label;
          crewColumn.appendChild(roleTitle);

          const roleList = document.createElement('div');
          roleList.className = 'row';
          const crewPromises = crewList.map(async (crewMember) => {
            const wikipediaUrl = await fetchWikipediaInfo(crewMember.name);
            const crewInfo = createPersonCard(crewMember, imageUrl, wikipediaUrl);
            roleList.appendChild(crewInfo);
          });

          await Promise.allSettled(crewPromises);
          crewColumn.appendChild(roleList);
        }
      }

      castAndCrewContainer.appendChild(crewColumn);

      const movieInfo = document.getElementById('movie-info');
      movieInfo.innerHTML = '';
      movieInfo.appendChild(castAndCrewContainer);

      const movieModal = new bootstrap.Modal(document.getElementById('movie-modal'));
      movieModal.show();
    } catch (error) {
      console.error('Error fetching movie cast and crew:', error);
    }
  }

  async function fetchWikipediaInfo(name) {
    const apiUrl = `https://en.wikipedia.org/w/api.php?action=query&format=json&prop=info&inprop=url&titles=${encodeURIComponent(name)}&origin=*`;

    try {
      const response = await fetch(apiUrl);
      const data = await response.json();
      const pageInfo = data.query.pages;
      const firstPage = Object.values(pageInfo)[0];

      if (firstPage && !firstPage.missing) {
        return firstPage.fullurl;
      }
    } catch (error) {
      console.error('Error fetching Wikipedia info:', error);
    }

    return null;
  }

  function createPersonCard(person, imageUrl, wikipediaUrl) {
    const personInfo = document.createElement('div');
    personInfo.className = 'col-sm-4 col-md-6 mb-3';

    const personCard = document.createElement('div');
    personCard.className = 'card';

    if (person.profile_path) {
      const personPhoto = document.createElement('img');
      personPhoto.src = `${imageUrl}${person.profile_path}`;
      personPhoto.className = 'card-img-top';
      personCard.appendChild(personPhoto);
    }

    const cardBody = document.createElement('div');
    cardBody.className = 'card-body';

    const personName = document.createElement('h5');
    personName.className = 'card-title';
    personName.textContent = person.name;
    cardBody.appendChild(personName);

    if (person.character) {
      const characterName = document.createElement('p');
      characterName.className = 'card-text';
      characterName.textContent = `como ${person.character}`;
      cardBody.appendChild(characterName);
    }

    if (wikipediaUrl) {
      const wikipediaLink = document.createElement("a");
      wikipediaLink.href = wikipediaUrl;
      wikipediaLink.textContent = "Biografía de Wikipedia";
      wikipediaLink.target = "_blank";
      wikipediaLink.rel = "noopener noreferrer";
      cardBody.appendChild(wikipediaLink);
    }

    personCard.appendChild(cardBody);
    personInfo.appendChild(personCard);

    return personInfo;
  }

  async function searchMovies() {

    const query = searchInput.value;

    if (!query) {
      alert('Por favor, ingrese un término de búsqueda.');
      return;
    }

    const url = `${API_URL}?api_key=${API_KEY}&language=es-ES&query=${query}&page=1&include_adult=false`;

    try {
      const response = await fetch(url);
      const data = await response.json();

      if (data.results.length > 0) {
        displayMovies(data.results);
      } else {
        alert('No se encontraron películas con el término de búsqueda proporcionado.');
      }
    } catch (error) {
      console.error('Error searching movies:', error);
    }
  }

  async function displayMovies(movies) {
    moviesContainer.innerHTML = '';
    closeResultsButton.style.display = 'block';

    movies.forEach(movie => {
      const movieCard = document.createElement('div');
      movieCard.className = 'card mb-3';

      const cardBody = document.createElement('div');
      cardBody.className = 'row g-0';

      if (movie.poster_path) {
        const moviePoster = document.createElement('img');
        moviePoster.src = `${IMAGE_BASE_URL}${movie.poster_path}`;
        moviePoster.alt = movie.title;
        moviePoster.className = 'img-fluid';
        cardBody.appendChild(moviePoster);
      }

      const textContainer = document.createElement('div');
      textContainer.className = 'col-md-8';

      const cardContent = document.createElement('div');
      cardContent.className = 'card-body';

      const movieTitle = document.createElement('h5');
      movieTitle.className = 'card-title';
      movieTitle.textContent = movie.title;
      cardContent.appendChild(movieTitle);

      const releaseDate = document.createElement('p');
      releaseDate.className = 'card-text';
      releaseDate.textContent = `Fecha de lanzamiento: ${movie.release_date}`;
      cardContent.appendChild(releaseDate);

      const overview = document.createElement('p');
      overview.className = 'card-text';
      overview.textContent = movie.overview;
      cardContent.appendChild(overview);

      const detailsButton = document.createElement('button');
      detailsButton.className = 'btn btn-primary';
      detailsButton.textContent = 'Ver detalles';
      detailsButton.addEventListener('click', () => fetchMovieCastAndCrew(movie.id));
      cardContent.appendChild(detailsButton);

      textContainer.appendChild(cardContent);
      cardBody.appendChild(textContainer);
      movieCard.appendChild(cardBody);
      moviesContainer.appendChild(movieCard);
    });
  }

  function closeResults() {
    moviesContainer.innerHTML = '';
    closeResultsButton.style.display = 'none';
  }

  async function getSuggestions(query) {
    if (!query) {
      suggestionsContainer.innerHTML = '';
      return;
    }

    const url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=es-ES&query=${query}&page=1&include_adult=false`;

    try {
      const response = await fetch(url);
      const data = await response.json();

      if (data.results.length > 0) {
        displaySuggestions(data.results);
      } else {
        suggestionsContainer.innerHTML = '';
      }
    } catch (error) {
      console.error('Error fetching suggestions:', error);
    }
  }

  function displaySuggestions(results) {
    suggestionsContainer.innerHTML = '';

    results.slice(0, 5).forEach(result => {
      const suggestionItem = document.createElement('div');
      suggestionItem.className = 'suggestion-item';
      suggestionItem.textContent = result.title;
      suggestionItem.addEventListener('click', () => {
        searchInput.value = result.title;
        searchMovies();
      });
      suggestionsContainer.appendChild(suggestionItem);
    });
  }
});
